import nu.studer.gradle.jooq.JooqEdition

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'checkstyle'
	id("com.github.spotbugs") version "5.0.14"
	id 'jacoco'
	id 'org.flywaydb.flyway' version '8.2.0'
	id 'nu.studer.jooq' version '6.0.1'
}

group = 'com.baga.promon'
version = '0.0.1-SNAPSHOT'

def schemaVersion = '1'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	jooqGenerator 'org.postgresql:postgresql'
	jooqGenerator 'org.jooq:jooq-meta-extensions'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

checkstyle {
	toolVersion '10.12.1'
}

check {
	dependsOn jacocoTestCoverageVerification
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
			excludes = [
					'com.baga.promon.usermanagement.UserManagementApplication'
			]
		}
	}
}

processResources {
	filesMatching("**/application.properties") {
		expand( project.properties )
	}
}

flyway {
	driver = project.properties['driverClassName']
	url = project.properties['url']
	user = project.properties['username']
	password = project.properties['password']
//	locations = ["filesystem:${project.getRootDir()}/src/migration/ddl/postgresql/sql",
//				 'filesystem:/src/migration/ddl/postgresql/data']
	locations = ["classpath:db/migration"]
}

jooq {
	// use jOOQ version defined in Spring Boot
	version = dependencyManagement.importedProperties['jooq.version']
	edition = JooqEdition.OSS

	configurations {
		main {
			generateSchemaSourceOnCompilation = true  // default (can be omitted)

			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN

				generator {
					// The default code generator.
					// You can override this one, to generate your own code style.

					// Supported generators:
					//  - org.jooq.codegen.JavaGenerator
					//  - org.jooq.codegen.ScalaGenerator
					//  - org.jooq.codegen.KotlinGenerator

					// Defaults to org.jooq.codegen.JavaGenerator
					name = 'org.jooq.codegen.JavaGenerator'

					database {
						// Rely on jOOQ DDL Database API
						name = 'org.jooq.meta.extensions.ddl.DDLDatabase'

						// H2 database schema
						inputSchema = 'PUBLIC'

						properties {

							// Specify the location of your SQL script.
							// You may use ant-style file matching, e.g. /path/**/to/*.sql
							//
							// Where:
							// - ** matches any directory subtree
							// - * matches any number of characters in a directory / file name
							// - ? matches a single character in a directory / file name
							property {
								key = 'scripts'
								value = "${projectDir}/src/db/migration"
							}

							// The sort order of the scripts within a directory, where:
							//
							// - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
							// - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
							// - flyway: sorts files the same way as flyway does
							// - none: doesn't sort directory contents after fetching them from the directory
							property {
								key = 'sort'
								value = 'semantic'
							}

							// The default schema for unqualified objects:
							//
							// - public: all unqualified objects are located in the PUBLIC (upper case) schema
							// - none: all unqualified objects are located in the default schema (default)
							//
							// This configuration can be overridden with the schema mapping feature
							property {
								key = 'unqualifiedSchema'
								value = 'none'
							}

							// The default name case for unquoted objects:
							//
							// - as_is: unquoted object names are kept unquoted
							// - upper: unquoted object names are turned into upper case (most databases)
							// - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
							property {
								key = 'defaultNameCase'
								value = 'as_is'
							}
						}

						// All elements that are generated from your schema
						// (A Java regular expression. Use the pipe to separate several expressions)
						// Watch out for case-sensitivity. Depending on your database, this might be important!
						// You can create case-insensitive regular expressions using this syntax: (?i:expr).
						// Whitespace is ignored and comments are possible.
						includes = '.*'

						// All elements that are excluded from your schema
						// (A Java regular expression. Use the pipe to separate several expressions).
						// Excludes match before includes, i.e. excludes have a higher priority.
						excludes = '''\
                                  flyway_schema_history | akeys | avals | defined | delete.*
                                | department_topic_arr | dup | employee_office_arr | exist.*                                   
                                | fetchval | get_.* | ghstore.* | gin.* | hs.* | hstore.* 
                                | isdefined | isexists | make_array | new_salary | populate_record 
                                | sale_price | slice.* | swap | tconvert | update_msrp | postal_code
                                | evaluation_criteria | rate_type | vat_type | .*_master | each 
                                | skeys | svals | top_three_sales_per_employee | product_of_product_line
                                  '''

						// Schema version provider
						schemaVersionProvider=schemaVersion
					}

					strategy {
						matchers {
							tables {
								table {
									pojoClass{
										expression = '$0_Entity'
										transform = 'PASCAL'
									}
									daoClass{
										expression = '$0_Repository'
										transform = 'PASCAL'
									}
								}
							}
						}
					}

					generate {
						daos = true
						validationAnnotations = true
						springAnnotations = true
					}

					target {
						packageName = 'com.baga.promon.usermanagement.generated.db'
						directory = 'src/main/generated-sources'
					}
				}
			}
		}
	}
}

spotbugs {
	excludeFilter.set(
			file("${projectDir}/config/spotbugs/spotbugs-exclude.xml")
	)
}
