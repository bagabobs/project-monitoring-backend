/*
 * This file is generated by jOOQ.
 */
package com.baga.promon.usermanagement.generated.db.tables;


import com.baga.promon.usermanagement.generated.db.DefaultSchema;
import com.baga.promon.usermanagement.generated.db.Keys;
import com.baga.promon.usermanagement.generated.db.tables.records.EmployeeRecord;

import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.4",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>EMPLOYEE</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>EMPLOYEE.ID</code>.
     */
    public final TableField<EmployeeRecord, BigInteger> ID = createField(DSL.name("ID"), SQLDataType.DECIMAL_INTEGER(100000).nullable(false), this, "");

    /**
     * The column <code>EMPLOYEE.name</code>.
     */
    public final TableField<EmployeeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>EMPLOYEE.ADDRESS</code>.
     */
    public final TableField<EmployeeRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>EMPLOYEE.JOIN_DATE</code>.
     */
    public final TableField<EmployeeRecord, OffsetDateTime> JOIN_DATE = createField(DSL.name("JOIN_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>EMPLOYEE</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>EMPLOYEE</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    /**
     * Create a <code>EMPLOYEE</code> table reference
     */
    public Employee() {
        this(DSL.name("EMPLOYEE"), null);
    }

    public <O extends Record> Employee(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_PK;
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    @Override
    public Employee as(Table<?> alias) {
        return new Employee(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Table<?> name) {
        return new Employee(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigInteger, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super BigInteger, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super BigInteger, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
