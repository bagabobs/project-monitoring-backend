/*
 * This file is generated by jOOQ.
 */
package com.baga.promon.usermanagement.generated.db.tables.daos;


import com.baga.promon.usermanagement.generated.db.tables.Employee;
import com.baga.promon.usermanagement.generated.db.tables.pojos.EmployeeEntity;
import com.baga.promon.usermanagement.generated.db.tables.records.EmployeeRecord;

import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.4",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EmployeeRepository extends DAOImpl<EmployeeRecord, EmployeeEntity, BigInteger> {

    /**
     * Create a new EmployeeRepository without any configuration
     */
    public EmployeeRepository() {
        super(Employee.EMPLOYEE, EmployeeEntity.class);
    }

    /**
     * Create a new EmployeeRepository with an attached configuration
     */
    @Autowired
    public EmployeeRepository(Configuration configuration) {
        super(Employee.EMPLOYEE, EmployeeEntity.class, configuration);
    }

    @Override
    public BigInteger getId(EmployeeEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<EmployeeEntity> fetchRangeOfId(BigInteger lowerInclusive, BigInteger upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<EmployeeEntity> fetchById(BigInteger... values) {
        return fetch(Employee.EMPLOYEE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public EmployeeEntity fetchOneById(BigInteger value) {
        return fetchOne(Employee.EMPLOYEE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<EmployeeEntity> fetchOptionalById(BigInteger value) {
        return fetchOptional(Employee.EMPLOYEE.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<EmployeeEntity> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<EmployeeEntity> fetchByName(String... values) {
        return fetch(Employee.EMPLOYEE.NAME, values);
    }

    /**
     * Fetch records that have <code>ADDRESS BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<EmployeeEntity> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADDRESS IN (values)</code>
     */
    public List<EmployeeEntity> fetchByAddress(String... values) {
        return fetch(Employee.EMPLOYEE.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>JOIN_DATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<EmployeeEntity> fetchRangeOfJoinDate(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.JOIN_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>JOIN_DATE IN (values)</code>
     */
    public List<EmployeeEntity> fetchByJoinDate(OffsetDateTime... values) {
        return fetch(Employee.EMPLOYEE.JOIN_DATE, values);
    }
}
