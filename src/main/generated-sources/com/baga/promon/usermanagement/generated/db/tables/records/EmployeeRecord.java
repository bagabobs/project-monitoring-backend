/*
 * This file is generated by jOOQ.
 */
package com.baga.promon.usermanagement.generated.db.tables.records;


import com.baga.promon.usermanagement.generated.db.tables.Employee;
import com.baga.promon.usermanagement.generated.db.tables.pojos.EmployeeEntity;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigInteger;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.4",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeRecord extends UpdatableRecordImpl<EmployeeRecord> implements Record4<BigInteger, String, String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>EMPLOYEE.ID</code>.
     */
    public void setId(BigInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>EMPLOYEE.ID</code>.
     */
    @NotNull
    public BigInteger getId() {
        return (BigInteger) get(0);
    }

    /**
     * Setter for <code>EMPLOYEE.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>EMPLOYEE.name</code>.
     */
    @NotNull
    @Size(max = 1000000000)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>EMPLOYEE.ADDRESS</code>.
     */
    public void setAddress(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>EMPLOYEE.ADDRESS</code>.
     */
    @NotNull
    @Size(max = 1000000000)
    public String getAddress() {
        return (String) get(2);
    }

    /**
     * Setter for <code>EMPLOYEE.JOIN_DATE</code>.
     */
    public void setJoinDate(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>EMPLOYEE.JOIN_DATE</code>.
     */
    @NotNull
    public OffsetDateTime getJoinDate() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<BigInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigInteger, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<BigInteger, String, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<BigInteger> field1() {
        return Employee.EMPLOYEE.ID;
    }

    @Override
    public Field<String> field2() {
        return Employee.EMPLOYEE.NAME;
    }

    @Override
    public Field<String> field3() {
        return Employee.EMPLOYEE.ADDRESS;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Employee.EMPLOYEE.JOIN_DATE;
    }

    @Override
    public BigInteger component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getAddress();
    }

    @Override
    public OffsetDateTime component4() {
        return getJoinDate();
    }

    @Override
    public BigInteger value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getAddress();
    }

    @Override
    public OffsetDateTime value4() {
        return getJoinDate();
    }

    @Override
    public EmployeeRecord value1(BigInteger value) {
        setId(value);
        return this;
    }

    @Override
    public EmployeeRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public EmployeeRecord value3(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public EmployeeRecord value4(OffsetDateTime value) {
        setJoinDate(value);
        return this;
    }

    @Override
    public EmployeeRecord values(BigInteger value1, String value2, String value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployeeRecord
     */
    public EmployeeRecord() {
        super(Employee.EMPLOYEE);
    }

    /**
     * Create a detached, initialised EmployeeRecord
     */
    public EmployeeRecord(BigInteger id, String name, String address, OffsetDateTime joinDate) {
        super(Employee.EMPLOYEE);

        setId(id);
        setName(name);
        setAddress(address);
        setJoinDate(joinDate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EmployeeRecord
     */
    public EmployeeRecord(EmployeeEntity value) {
        super(Employee.EMPLOYEE);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setAddress(value.getAddress());
            setJoinDate(value.getJoinDate());
            resetChangedOnNotNull();
        }
    }
}
