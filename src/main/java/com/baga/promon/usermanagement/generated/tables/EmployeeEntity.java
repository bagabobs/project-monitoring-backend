/*
 * This file is generated by jOOQ.
 */
package com.baga.promon.usermanagement.generated.tables;


import com.baga.promon.usermanagement.generated.Keys;
import com.baga.promon.usermanagement.generated.Public;
import com.baga.promon.usermanagement.generated.tables.records.EmployeeEntityRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeEntity extends TableImpl<EmployeeEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee_entity</code>
     */
    public static final EmployeeEntity EMPLOYEE_ENTITY = new EmployeeEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeEntityRecord> getRecordType() {
        return EmployeeEntityRecord.class;
    }

    /**
     * The column <code>public.employee_entity.id</code>.
     */
    public final TableField<EmployeeEntityRecord, BigDecimal> ID = createField(DSL.name("id"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.employee_entity.name</code>.
     */
    public final TableField<EmployeeEntityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.employee_entity.address</code>.
     */
    public final TableField<EmployeeEntityRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.employee_entity.join_date</code>.
     */
    public final TableField<EmployeeEntityRecord, LocalDateTime> JOIN_DATE = createField(DSL.name("join_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private EmployeeEntity(Name alias, Table<EmployeeEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeEntity(Name alias, Table<EmployeeEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee_entity</code> table reference
     */
    public EmployeeEntity(String alias) {
        this(DSL.name(alias), EMPLOYEE_ENTITY);
    }

    /**
     * Create an aliased <code>public.employee_entity</code> table reference
     */
    public EmployeeEntity(Name alias) {
        this(alias, EMPLOYEE_ENTITY);
    }

    /**
     * Create a <code>public.employee_entity</code> table reference
     */
    public EmployeeEntity() {
        this(DSL.name("employee_entity"), null);
    }

    public <O extends Record> EmployeeEntity(Table<O> child, ForeignKey<O, EmployeeEntityRecord> key) {
        super(child, key, EMPLOYEE_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmployeeEntityRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_PK;
    }

    @Override
    public EmployeeEntity as(String alias) {
        return new EmployeeEntity(DSL.name(alias), this);
    }

    @Override
    public EmployeeEntity as(Name alias) {
        return new EmployeeEntity(alias, this);
    }

    @Override
    public EmployeeEntity as(Table<?> alias) {
        return new EmployeeEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeEntity rename(String name) {
        return new EmployeeEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeEntity rename(Name name) {
        return new EmployeeEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeEntity rename(Table<?> name) {
        return new EmployeeEntity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigDecimal, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super BigDecimal, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super BigDecimal, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
