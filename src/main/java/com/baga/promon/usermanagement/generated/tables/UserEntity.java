/*
 * This file is generated by jOOQ.
 */
package com.baga.promon.usermanagement.generated.tables;


import com.baga.promon.usermanagement.generated.Keys;
import com.baga.promon.usermanagement.generated.Public;
import com.baga.promon.usermanagement.generated.tables.records.UserEntityRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntity extends TableImpl<UserEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_entity</code>
     */
    public static final UserEntity USER_ENTITY = new UserEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEntityRecord> getRecordType() {
        return UserEntityRecord.class;
    }

    /**
     * The column <code>public.user_entity.id</code>.
     */
    public final TableField<UserEntityRecord, BigDecimal> ID = createField(DSL.name("id"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.user_entity.username</code>.
     */
    public final TableField<UserEntityRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.user_entity.password</code>.
     */
    public final TableField<UserEntityRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.user_entity.last_login</code>.
     */
    public final TableField<UserEntityRecord, LocalDateTime> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user_entity.employee_id</code>.
     */
    public final TableField<UserEntityRecord, BigDecimal> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.NUMERIC.nullable(false), this, "");

    private UserEntity(Name alias, Table<UserEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEntity(Name alias, Table<UserEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_entity</code> table reference
     */
    public UserEntity(String alias) {
        this(DSL.name(alias), USER_ENTITY);
    }

    /**
     * Create an aliased <code>public.user_entity</code> table reference
     */
    public UserEntity(Name alias) {
        this(alias, USER_ENTITY);
    }

    /**
     * Create a <code>public.user_entity</code> table reference
     */
    public UserEntity() {
        this(DSL.name("user_entity"), null);
    }

    public <O extends Record> UserEntity(Table<O> child, ForeignKey<O, UserEntityRecord> key) {
        super(child, key, USER_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserEntityRecord> getPrimaryKey() {
        return Keys.USER_PK;
    }

    @Override
    public List<ForeignKey<UserEntityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ENTITY__EMPLOYEE_FK);
    }

    private transient EmployeeEntity _employeeEntity;

    /**
     * Get the implicit join path to the <code>public.employee_entity</code>
     * table.
     */
    public EmployeeEntity employeeEntity() {
        if (_employeeEntity == null)
            _employeeEntity = new EmployeeEntity(this, Keys.USER_ENTITY__EMPLOYEE_FK);

        return _employeeEntity;
    }

    @Override
    public UserEntity as(String alias) {
        return new UserEntity(DSL.name(alias), this);
    }

    @Override
    public UserEntity as(Name alias) {
        return new UserEntity(alias, this);
    }

    @Override
    public UserEntity as(Table<?> alias) {
        return new UserEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(String name) {
        return new UserEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Name name) {
        return new UserEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Table<?> name) {
        return new UserEntity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<BigDecimal, String, String, LocalDateTime, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super BigDecimal, ? super String, ? super String, ? super LocalDateTime, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super BigDecimal, ? super String, ? super String, ? super LocalDateTime, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
